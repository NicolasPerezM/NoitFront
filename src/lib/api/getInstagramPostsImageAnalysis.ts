// lib/api/getInstagramPostsImageAnalysis.ts

type ColorPalette = {
    rgb: [number, number, number];
    proportion: number;
};

type ImageAnalysis = {
    file_name: string;
    gpt4o_analysis: string;
    color_palette: ColorPalette[];
};

type GetInstagramPostsImageAnalysisResponse = {
    images_analyzed: ImageAnalysis[];
    total_images: number;
    analysis_timestamp: string;
};

type ApiErrorPayload = {
    error?: string | { detail?: string; message?: string; [key: string]: any };
    detail?: string;
    message?: string;
    availableCookies?: string[];
    requestedCompetitorId?: string;
    [key: string]: any;
};

export async function getInstagramPostsImageAnalysis(competitorId: string): Promise<GetInstagramPostsImageAnalysisResponse> {
    console.log('üöÄ getInstagramPostsImageAnalysis iniciada con competitor_id:', competitorId);
    
    try {
        if (!competitorId || typeof competitorId !== 'string' || competitorId.trim() === '') {
            console.error('‚ùå Competitor ID inv√°lido:', competitorId);
            throw new Error('Competitor ID es requerido y debe ser una cadena v√°lida');
        }

        const url = `/api/socialAnalysis/instagram/imagesAnalysis/getInstagramPostsImageAnalysis?competitor_id=${encodeURIComponent(competitorId.trim())}`;
        console.log('üì° Haciendo fetch a:', url);
        
        // Agregar timeout para evitar peticiones colgadas
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 segundos timeout

        const response = await fetch(url, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
            },
            credentials: 'include',
            signal: controller.signal,
        });

        clearTimeout(timeoutId);
        console.log('üì° Respuesta recibida:', response.status, response.statusText);

        if (!response.ok) {
            console.error('‚ùå Respuesta no OK:', response.status, response.statusText);
            
            let errorMessage = `Error ${response.status}: ${response.statusText || 'Error desconocido al contactar el servidor'}`;
            let errorDetails: ApiErrorPayload | string | null = null;

            try {
                const contentType = response.headers.get('content-type');
                console.log('üìã Content-Type de error:', contentType);
                
                if (contentType && contentType.includes('application/json')) {
                    errorDetails = await response.json();
                    console.log('üìã Error details JSON:', errorDetails);
                } else {
                    errorDetails = await response.text();
                    console.log('üìã Error details Text:', errorDetails);
                }

                if (errorDetails && typeof errorDetails === 'object') {
                    if (typeof errorDetails.error === 'string') {
                        errorMessage = errorDetails.error;
                    } else if (typeof errorDetails.error?.detail === 'string') {
                        errorMessage = errorDetails.error.detail;
                    } else if (typeof errorDetails.error?.message === 'string') {
                        errorMessage = errorDetails.error.message;
                    } else if (typeof errorDetails.detail === 'string') {
                        errorMessage = errorDetails.detail;
                    } else if (typeof errorDetails.message === 'string') {
                        errorMessage = errorDetails.message;
                    } else {
                        errorMessage = `Error del servidor: ${JSON.stringify(errorDetails)}`;
                    }

                    // Si hay informaci√≥n de cookies disponibles, agregarla al error
                    if (errorDetails.availableCookies && Array.isArray(errorDetails.availableCookies)) {
                        errorMessage += ` (Cookies disponibles: ${errorDetails.availableCookies.join(', ')})`;
                    }

                    // Si hay informaci√≥n del competitor_id solicitado, agregarla al error
                    if (errorDetails.requestedCompetitorId) {
                        errorMessage += ` (Competitor ID solicitado: ${errorDetails.requestedCompetitorId})`;
                    }

                    // Manejo espec√≠fico para error 404
                    if (response.status === 404) {
                        errorMessage = `No se encontraron im√°genes con an√°lisis para el competitor ID "${competitorId}" o el competitor ID no existe`;
                    }

                    // Manejo espec√≠fico para error 401
                    if (response.status === 401) {
                        errorMessage = `No tienes autorizaci√≥n para acceder al an√°lisis de im√°genes de Instagram de este competidor. ${errorMessage}`;
                    }
                } else if (typeof errorDetails === 'string') {
                    errorMessage = errorDetails;
                }
            } catch (parseError) {
                console.error('‚ùå Error parseando respuesta de error:', parseError);
                // Mantener el errorMessage base si hay error parseando
            }

            throw new Error(errorMessage);
        }

        console.log('‚úÖ Respuesta OK, parseando JSON...');
        const data: GetInstagramPostsImageAnalysisResponse = await response.json();
        
        const totalImages = data.total_images || 0;
        const analyzedImages = data.images_analyzed?.length || 0;
        const analysisTimestamp = data.analysis_timestamp || 'N/A';
        
        const topImages = data.images_analyzed?.slice(0, 3) || [];
        
        console.log('‚úÖ Datos parseados exitosamente:', {
            competitorId: competitorId,
            totalImages: totalImages,
            analyzedImages: analyzedImages,
            analysisTimestamp: analysisTimestamp,
            topImages: topImages.map(img => ({
                fileName: img.file_name,
                hasAnalysis: !!img.gpt4o_analysis,
                colorsCount: img.color_palette?.length || 0
            }))
        });
        
        // Debug log para la estructura de datos
        console.log('üîç Data structure:', {
            hasImagesAnalyzed: !!data.images_analyzed,
            hasTotalImages: !!data.total_images,
            hasAnalysisTimestamp: !!data.analysis_timestamp,
            imagesAnalyzedType: typeof data.images_analyzed,
            totalImagesType: typeof data.total_images,
            analysisTimestampType: typeof data.analysis_timestamp
        });
        
        // Validaci√≥n b√°sica de la respuesta
        if (!data || typeof data !== 'object' || Array.isArray(data)) {
            console.error('‚ùå Respuesta no v√°lida:', data);
            throw new Error('La respuesta del servidor no contiene datos de an√°lisis de im√°genes v√°lidos');
        }

        // Validaci√≥n de images_analyzed
        if (!data.images_analyzed || !Array.isArray(data.images_analyzed)) {
            console.error('‚ùå images_analyzed no v√°lido:', data.images_analyzed);
            throw new Error('Los datos de im√°genes analizadas no son v√°lidos');
        }

        if (data.images_analyzed.length === 0) {
            console.error('‚ùå No se encontraron im√°genes analizadas:', data.images_analyzed);
            throw new Error('No se encontraron im√°genes analizadas en la respuesta');
        }

        // Validaci√≥n de total_images
        if (typeof data.total_images !== 'number' || data.total_images < 0) {
            console.error('‚ùå total_images no v√°lido:', data.total_images);
            throw new Error('El total de im√°genes no es v√°lido');
        }

        // Validaci√≥n de analysis_timestamp
        if (!data.analysis_timestamp || typeof data.analysis_timestamp !== 'string') {
            console.error('‚ùå analysis_timestamp no v√°lido:', data.analysis_timestamp);
            throw new Error('El timestamp del an√°lisis no es v√°lido');
        }

        // Validaci√≥n de que la fecha sea v√°lida
        const analysisDate = new Date(data.analysis_timestamp);
        if (isNaN(analysisDate.getTime())) {
            console.warn('‚ö†Ô∏è Fecha de an√°lisis inv√°lida:', data.analysis_timestamp);
        }

        // Validaci√≥n de la estructura de cada imagen analizada
        const invalidImages = data.images_analyzed.filter(image => 
            !image ||
            typeof image !== 'object' ||
            typeof image.file_name !== 'string' ||
            typeof image.gpt4o_analysis !== 'string' ||
            !Array.isArray(image.color_palette) ||
            image.file_name.trim() === '' ||
            image.gpt4o_analysis.trim() === ''
        );

        if (invalidImages.length > 0) {
            console.error('‚ùå Im√°genes inv√°lidas encontradas:', invalidImages.slice(0, 3));
            throw new Error(`Se encontraron ${invalidImages.length} im√°genes con estructura inv√°lida`);
        }

        // Validaci√≥n de color_palette para cada imagen
        const imagesWithInvalidColors = data.images_analyzed.filter(image => {
            return image.color_palette.some(color => 
                !color ||
                typeof color !== 'object' ||
                !Array.isArray(color.rgb) ||
                color.rgb.length !== 3 ||
                typeof color.proportion !== 'number' ||
                color.rgb.some(value => typeof value !== 'number' || value < 0 || value > 255) ||
                color.proportion < 0 ||
                color.proportion > 1 ||
                isNaN(color.proportion)
            );
        });

        if (imagesWithInvalidColors.length > 0) {
            console.error('‚ùå Im√°genes con colores inv√°lidos:', imagesWithInvalidColors.slice(0, 3));
            throw new Error(`Se encontraron ${imagesWithInvalidColors.length} im√°genes con paletas de colores inv√°lidas`);
        }

        // Validaci√≥n de consistencia entre total_images y images_analyzed
        if (data.images_analyzed.length > data.total_images) {
            console.warn('‚ö†Ô∏è M√°s im√°genes analizadas que el total:', {
                analyzed: data.images_analyzed.length,
                total: data.total_images
            });
        }

        // Validaci√≥n de duplicados en file_name
        const fileNames = data.images_analyzed.map(img => img.file_name);
        const uniqueFileNames = new Set(fileNames);
        if (fileNames.length !== uniqueFileNames.size) {
            console.warn('‚ö†Ô∏è Se encontraron nombres de archivo duplicados');
        }

        // Estad√≠sticas adicionales
        const totalColors = data.images_analyzed.reduce((sum, img) => sum + img.color_palette.length, 0);
        const avgColorsPerImage = data.images_analyzed.length > 0 ? (totalColors / data.images_analyzed.length).toFixed(2) : 0;
        const avgAnalysisLength = data.images_analyzed.length > 0 ? 
            (data.images_analyzed.reduce((sum, img) => sum + img.gpt4o_analysis.length, 0) / data.images_analyzed.length).toFixed(0) : 0;

        console.log('üìä Estad√≠sticas del an√°lisis:', {
            totalColors,
            avgColorsPerImage,
            avgAnalysisLength
        });

        console.log('‚úÖ getInstagramPostsImageAnalysis completada exitosamente');
        return data;
        
    } catch (error) {
        console.error('üí• Error en getInstagramPostsImageAnalysis:', error);
        
        if (error instanceof Error) {
            if (error.name === 'AbortError') {
                throw new Error('La petici√≥n se agot√≥ el tiempo de espera. Por favor, intenta de nuevo.');
            }
            throw new Error(error.message || 'Ocurri√≥ un error desconocido al obtener el an√°lisis de im√°genes de Instagram.');
        } else {
            throw new Error(String(error) || 'Ocurri√≥ un error desconocido y no est√°ndar.');
        }
    }
}