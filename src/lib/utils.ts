// Import the `clsx` library and its `ClassValue` type.
// `clsx` is a utility for constructing `className` strings conditionally.
import { clsx, type ClassValue } from "clsx";
// Import the `twMerge` library from `tailwind-merge`.
// `twMerge` is a utility for merging Tailwind CSS classes intelligently,
// resolving conflicts and removing redundant classes.
import { twMerge } from "tailwind-merge";

/**
 * @function cn
 * @description A utility function that combines `clsx` and `twMerge` to conditionally
 *              construct and merge Tailwind CSS class names.
 *
 * This function is commonly used in projects utilizing Tailwind CSS with component-based
 * architectures (like React, Vue, Svelte) to apply classes dynamically and avoid
 * style conflicts.
 *
 * How it works:
 * 1. `clsx(inputs)`: Takes any number of arguments (`ClassValue[]`), which can be
 *    strings, arrays, or objects. It processes these inputs and generates a single
 *    string of class names. For example:
 *    - `clsx('foo', true && 'bar', { baz: false, bat: true })` would produce `'foo bar bat'`.
 * 2. `twMerge(...)`: Takes the class string generated by `clsx` and merges it.
 *    `twMerge` intelligently handles Tailwind CSS classes by:
 *    - Removing redundant classes (e.g., `p-2 p-4` becomes `p-4`).
 *    - Resolving conflicting classes based on Tailwind's internal order
 *      (e.g., `text-red-500 text-blue-500` might become `text-blue-500` if `text-blue-500`
 *      is defined later or has higher specificity in the context of Tailwind's utilities).
 *
 * @param {...ClassValue[]} inputs - A variable number of arguments that can be strings,
 *                                   arrays of strings, or objects where keys are class names
 *                                   and values are booleans indicating if the class should be included.
 * @returns {string} A string of merged and optimized class names.
 *
 * @example
 * // Basic usage:
 * cn("p-4", "font-bold"); // => "p-4 font-bold"
 *
 * // Conditional classes:
 * const isActive = true;
 * cn("p-2", isActive && "bg-blue-500"); // => "p-2 bg-blue-500"
 * cn({ "text-red-600": true, "bg-gray-100": false }); // => "text-red-600"
 *
 * // Merging and conflict resolution:
 * cn("p-2 m-2", "p-4"); // => "m-2 p-4" (p-2 is overridden by p-4)
 * cn("text-left", "text-center"); // => "text-center" (last conflicting class wins or per twMerge logic)
 */
export function cn(...inputs: ClassValue[]): string {
  // First, use clsx to process conditional classes and produce a raw class string.
  // Then, pass this string to twMerge to optimize and resolve Tailwind CSS class conflicts.
  return twMerge(clsx(inputs));
}
